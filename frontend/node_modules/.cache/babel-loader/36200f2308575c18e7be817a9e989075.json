{"ast":null,"code":"var _s = $RefreshSig$();\n\n// Пользовательский Хук для сбора информации инпутов, и валидации формы\nimport React, { useCallback } from \"react\";\nexport const useFormWithValidation = () => {\n  _s();\n\n  const [values, setValues] = React.useState({});\n  const [errors, setErrors] = React.useState({});\n  const [isValid, setIsValid] = React.useState(false);\n  const [isValidInputs, setIsValidInputs] = React.useState({});\n\n  const handleChange = evt => {\n    const input = evt.target;\n    const value = input.value;\n    const name = input.name;\n    setValues({ ...values,\n      [name]: value\n    });\n    setErrors({ ...errors,\n      [name]: input.validationMessage\n    });\n    setIsValid(input.closest(\"form\").checkValidity());\n    setIsValidInputs({ ...isValidInputs,\n      [name]: input.checkValidity()\n    });\n  };\n\n  const resetFrom = useCallback((newValues = {}, newErrors = {}, newIsValid = false, newIsValidInputs = {}) => {\n    setValues(newValues);\n    setErrors(newErrors);\n    setIsValid(newIsValid);\n    setIsValidInputs(newIsValidInputs);\n  }, [setValues, setErrors, setIsValid]);\n  return {\n    values,\n    handleChange,\n    resetFrom,\n    errors,\n    isValid,\n    isValidInputs\n  };\n};\n\n_s(useFormWithValidation, \"Sty/s37n65Q0uYjLd9b3pyfeYhY=\");","map":{"version":3,"sources":["/Users/al55/dev/react-mesto-api-full/frontend/src/hooks/useFormWithValidation.js"],"names":["React","useCallback","useFormWithValidation","values","setValues","useState","errors","setErrors","isValid","setIsValid","isValidInputs","setIsValidInputs","handleChange","evt","input","target","value","name","validationMessage","closest","checkValidity","resetFrom","newValues","newErrors","newIsValid","newIsValidInputs"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AAEA,OAAO,MAAMC,qBAAqB,GAAG,MAAM;AAAA;;AACzC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAA5B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,KAAK,CAACK,QAAN,CAAe,EAAf,CAA5B;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBT,KAAK,CAACK,QAAN,CAAe,KAAf,CAA9B;AAEA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCX,KAAK,CAACK,QAAN,CAAe,EAAf,CAA1C;;AAEA,QAAMO,YAAY,GAAIC,GAAD,IAAS;AAC5B,UAAMC,KAAK,GAAGD,GAAG,CAACE,MAAlB;AACA,UAAMC,KAAK,GAAGF,KAAK,CAACE,KAApB;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACG,IAAnB;AACAb,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACc,IAAD,GAAQD;AAArB,KAAD,CAAT;AACAT,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACW,IAAD,GAAQH,KAAK,CAACI;AAA3B,KAAD,CAAT;AACAT,IAAAA,UAAU,CAACK,KAAK,CAACK,OAAN,CAAc,MAAd,EAAsBC,aAAtB,EAAD,CAAV;AAEAT,IAAAA,gBAAgB,CAAC,EAAE,GAAGD,aAAL;AAAoB,OAACO,IAAD,GAAQH,KAAK,CAACM,aAAN;AAA5B,KAAD,CAAhB;AACD,GATD;;AAWA,QAAMC,SAAS,GAAGpB,WAAW,CAC3B,CAACqB,SAAS,GAAG,EAAb,EAAiBC,SAAS,GAAG,EAA7B,EAAiCC,UAAU,GAAG,KAA9C,EAAqDC,gBAAgB,GAAG,EAAxE,KAA+E;AAC7ErB,IAAAA,SAAS,CAACkB,SAAD,CAAT;AACAf,IAAAA,SAAS,CAACgB,SAAD,CAAT;AACAd,IAAAA,UAAU,CAACe,UAAD,CAAV;AACAb,IAAAA,gBAAgB,CAACc,gBAAD,CAAhB;AACD,GAN0B,EAO3B,CAACrB,SAAD,EAAYG,SAAZ,EAAuBE,UAAvB,CAP2B,CAA7B;AAUA,SAAO;AAAEN,IAAAA,MAAF;AAAUS,IAAAA,YAAV;AAAwBS,IAAAA,SAAxB;AAAmCf,IAAAA,MAAnC;AAA2CE,IAAAA,OAA3C;AAAoDE,IAAAA;AAApD,GAAP;AACD,CA7BM;;GAAMR,qB","sourcesContent":["// Пользовательский Хук для сбора информации инпутов, и валидации формы\nimport React, { useCallback } from \"react\";\n\nexport const useFormWithValidation = () => {\n  const [values, setValues] = React.useState({});\n  const [errors, setErrors] = React.useState({});\n  const [isValid, setIsValid] = React.useState(false);\n\n  const [isValidInputs, setIsValidInputs] = React.useState({});\n\n  const handleChange = (evt) => {\n    const input = evt.target;\n    const value = input.value;\n    const name = input.name;\n    setValues({ ...values, [name]: value });\n    setErrors({ ...errors, [name]: input.validationMessage });\n    setIsValid(input.closest(\"form\").checkValidity());\n\n    setIsValidInputs({ ...isValidInputs, [name]: input.checkValidity() });\n  };\n\n  const resetFrom = useCallback(\n    (newValues = {}, newErrors = {}, newIsValid = false, newIsValidInputs = {}) => {\n      setValues(newValues);\n      setErrors(newErrors);\n      setIsValid(newIsValid);\n      setIsValidInputs(newIsValidInputs);\n    },\n    [setValues, setErrors, setIsValid]\n  );\n\n  return { values, handleChange, resetFrom, errors, isValid, isValidInputs };\n}\n"]},"metadata":{},"sourceType":"module"}